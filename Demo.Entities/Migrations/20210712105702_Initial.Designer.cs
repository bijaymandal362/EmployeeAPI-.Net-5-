// <auto-generated />
using System;
using Demo.Entities.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Demo.Entities.Migrations
{
    [DbContext(typeof(EmployeeDbContext))]
    [Migration("20210712105702_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.7");

            modelBuilder.Entity("Demo.Entities.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(30)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(50)");

                    b.HasKey("EmployeeId");

                    b.ToTable("Employee");

                    b.HasData(
                        new
                        {
                            EmployeeId = 1,
                            Address = "Janakpur",
                            FullName = "Bijay Mandal"
                        },
                        new
                        {
                            EmployeeId = 2,
                            Address = "Janakpur",
                            FullName = "Sunil Mandal"
                        });
                });

            modelBuilder.Entity("Demo.Entities.EmployeeAttendance", b =>
                {
                    b.Property<int>("EmployeeAttendanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("TotalHours")
                        .HasColumnType("REAL");

                    b.HasKey("EmployeeAttendanceId");

                    b.HasIndex("EmployeeId", "Date")
                        .IsUnique();

                    b.ToTable("EmployeeAttendance");
                });

            modelBuilder.Entity("Demo.Entities.EmployeeSalary", b =>
                {
                    b.Property<int>("EmployeeSalaryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("NetAmount")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Rate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalWorkingHour")
                        .HasColumnType("TEXT");

                    b.HasKey("EmployeeSalaryId");

                    b.HasIndex("EmployeeId", "StartDate", "EndDate")
                        .IsUnique();

                    b.ToTable("EmployeeSalary");
                });

            modelBuilder.Entity("Demo.Entities.MaximumHourLimit", b =>
                {
                    b.Property<int>("MaximumHourLimitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("LimitPerDay")
                        .HasColumnType("TEXT");

                    b.HasKey("MaximumHourLimitId");

                    b.ToTable("MaximumHourLimit");

                    b.HasData(
                        new
                        {
                            MaximumHourLimitId = 1,
                            LimitPerDay = 24m
                        });
                });

            modelBuilder.Entity("Demo.Entities.Model.EmployeeCheckIn", b =>
                {
                    b.Property<int>("EmployeeCheckInID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CheckIn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Day")
                        .HasColumnType("TEXT");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("EmployeeCheckInID");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeCheckIn");
                });

            modelBuilder.Entity("Demo.Entities.Model.EmployeeCheckOut", b =>
                {
                    b.Property<int>("EmployeeCheckOutId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CheckOut")
                        .HasColumnType("TEXT");

                    b.Property<string>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Day")
                        .HasColumnType("TEXT");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("EmployeeCheckOutId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeCheckOut");
                });

            modelBuilder.Entity("Demo.Entities.Salary", b =>
                {
                    b.Property<int>("EmployeeSalaryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("MaximumHour")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MinimumHour")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("RatePerHour")
                        .HasColumnType("TEXT");

                    b.HasKey("EmployeeSalaryId");

                    b.ToTable("Salary");

                    b.HasData(
                        new
                        {
                            EmployeeSalaryId = 1,
                            MaximumHour = 20m,
                            MinimumHour = 0m,
                            RatePerHour = 50m
                        },
                        new
                        {
                            EmployeeSalaryId = 2,
                            MaximumHour = 40m,
                            MinimumHour = 20m,
                            RatePerHour = 70m
                        },
                        new
                        {
                            EmployeeSalaryId = 3,
                            MinimumHour = 40m,
                            RatePerHour = 150m
                        });
                });

            modelBuilder.Entity("Demo.Entities.EmployeeAttendance", b =>
                {
                    b.HasOne("Demo.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Demo.Entities.EmployeeSalary", b =>
                {
                    b.HasOne("Demo.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Demo.Entities.Model.EmployeeCheckIn", b =>
                {
                    b.HasOne("Demo.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Demo.Entities.Model.EmployeeCheckOut", b =>
                {
                    b.HasOne("Demo.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });
#pragma warning restore 612, 618
        }
    }
}
